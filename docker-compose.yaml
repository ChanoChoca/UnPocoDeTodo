version: "3.9"  # Define la versión del formato del archivo Docker Compose.
services:
  mysql8:  # Define el servicio para MySQL 8.
    container_name: mysql8  # Nombre del contenedor que ejecutará MySQL.
    image: mysql:8  # Imagen de Docker que se usará para el servicio, en este caso, MySQL versión 8.
    ports:
      - "3307:3306"  # Mapea el puerto 3307 del host al puerto 3306 del contenedor (puerto predeterminado de MySQL).
    environment:  # Variables de entorno necesarias para configurar MySQL.
      MYSQL_ROOT_PASSWORD: chanochoca  # Contraseña para el usuario root de MySQL.
      MYSQL_DATABASE: msvc-usuarios  # Nombre de la base de datos que se creará en MySQL.
    volumes:
      - data-mysql:/var/lib/mysql  # Asocia un volumen persistente para almacenar los datos de MySQL.
    restart: always  # Configura el contenedor para que siempre se reinicie si falla.
    networks:
      - spring  # Conecta el servicio MySQL a la red personalizada llamada "spring".

  postgres16:  # Define el servicio para PostgreSQL 16.
    container_name: postgres16  # Nombre del contenedor que ejecutará PostgreSQL.
    image: postgres:16.3-alpine3.20  # Imagen de Docker que se usará para el servicio, en este caso, PostgreSQL versión 16 con Alpine.
    ports:
      - "5433:5432"  # Mapea el puerto 5433 del host al puerto 5432 del contenedor (puerto predeterminado de PostgreSQL).
    environment:  # Variables de entorno necesarias para configurar PostgreSQL.
      POSTGRES_PASSWORD: postgres  # Contraseña para el usuario "postgres" de la base de datos.
      POSTGRES_DB: msvc-cursos  # Nombre de la base de datos que se creará en PostgreSQL.
    volumes:
      - data-postgres:/var/lib/postgresql/data  # Asocia un volumen persistente para almacenar los datos de PostgreSQL.
    restart: always  # Configura el contenedor para que siempre se reinicie si falla.
    networks:
      - spring  # Conecta el servicio PostgreSQL a la red personalizada llamada "spring".

  msvc-usuarios:  # Define el servicio para el microservicio de usuarios.
    container_name: msvc-usuarios  # Nombre del contenedor que ejecutará el microservicio.
    image: chanochoca/usuarios:latest  # Imagen de Docker del microservicio de usuarios.
    # Si se descomenta la sección `build`, Docker construirá la imagen desde un Dockerfile en lugar de usar una imagen existente.
    # build:
    #   context: ./
    #   dockerfile: ./msvc-usuarios/Dockerfile
    ports:
      - "8001:8001"  # Mapea el puerto 8001 del host al puerto 8001 del contenedor.
    env_file: ./msvc-usuarios/.env  # Archivo de entorno que contiene variables de entorno específicas para este servicio.
    networks:
      - spring  # Conecta el servicio del microservicio de usuarios a la red "spring".
    depends_on:  # Especifica dependencias, asegurando que MySQL esté en funcionamiento antes de iniciar este servicio.
      - mysql8
    restart: always  # Configura el contenedor para que siempre se reinicie si falla.

  msvc-cursos:  # Define el servicio para el microservicio de cursos.
    container_name: msvc-cursos  # Nombre del contenedor que ejecutará el microservicio.
    image: chanochoca/cursos:latest  # Imagen de Docker del microservicio de cursos.
    # Si se descomenta la sección `build`, Docker construirá la imagen desde un Dockerfile en lugar de usar una imagen existente.
    # build:
    #   context: ./
    #   dockerfile: ./msvc-cursos/Dockerfile
    ports:
      - "8002:8002"  # Mapea el puerto 8002 del host al puerto 8002 del contenedor.
    env_file:
      - ./msvc-cursos/.env  # Archivo de entorno que contiene variables de entorno específicas para este servicio.
    networks:
      - spring  # Conecta el servicio del microservicio de cursos a la red "spring".
    depends_on:  # Especifica dependencias, asegurando que PostgreSQL y el microservicio de usuarios estén en funcionamiento antes de iniciar este servicio.
      - postgres16
      - msvc-usuarios
    restart: always  # Configura el contenedor para que siempre se reinicie si falla.

volumes:  # Define volúmenes persistentes para almacenar los datos de los contenedores.
  data-mysql:  # Volumen para los datos de MySQL.
    name: data-mysql
  data-postgres:  # Volumen para los datos de PostgreSQL.
    name: data-postgres

networks:  # Define la red personalizada "spring" para conectar los servicios entre sí.
  spring:
    name: spring  # Nombre de la red personalizada.
